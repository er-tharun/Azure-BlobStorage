using System;using System.Threading.Tasks;using Azure.Storage;using Azure.Storage.Blobs;using Azure.Storage.Blobs.Models;public class program{    private const string blobEndPoint ="https://mediastortharun.blob.core.windows.net/";    private const string storageAccountName = "mediastortharun";    private const string storageAccountKey = "/p0ZBCtGOzcGJdOKXSja9wq7HWIfZDoy8hpQz1kMpCFyPEMl+uSFoovmuAkcJn6ubM0Q4o1KGOGI+AStUJ1Usw==";    public static async Task Main(string[] args)    {        StorageSharedKeyCredential accountCred = new StorageSharedKeyCredential(storageAccountName, storageAccountKey);        BlobServiceClient blobClient = new BlobServiceClient(new Uri(blobEndPoint),accountCred);        AccountInfo info = await blobClient.GetAccountInfoAsync();        await Console.Out.WriteLineAsync($"Connected to Azure Storage Account.");        await Console.Out.WriteLineAsync($"Account Name \t {storageAccountName}");        await Console.Out.WriteLineAsync($"Account Kind: \t {info?.AccountKind}");        await Console.Out.WriteLineAsync($"Account Sku Unit: \t {info?.SkuName}");        await EnumerateContainerAsync(blobClient);        string existingContainerName = "raster-graphics";        await EnumerateContainerBlobAsync(blobClient, existingContainerName);        string newContainerName = "vector-graphics";        BlobContainerClient containerClient = await GetContainerAsnyc(blobClient, newContainerName);        string uploadedBlobName = "graph.svc";        BlobClient client = await GetBlobAsync(containerClient, uploadedBlobName);        await Console.Out.WriteLineAsync($"Blob URL: \t {client.Uri}");    }    private static async Task EnumerateContainerAsync(BlobServiceClient blobCLient)    {        await foreach(BlobContainerItem containerClient in blobCLient.GetBlobContainersAsync())        {            await Console.Out.WriteLineAsync($"{containerClient.Name}");        }    }    private static async Task EnumerateContainerBlobAsync(BlobServiceClient client, string containerName)    {        BlobContainerClient containerClient = client.GetBlobContainerClient(containerName);        await Console.Out.WriteLineAsync($"Seaching : \t {containerClient.Name}");        await foreach(BlobItem item in containerClient.GetBlobsAsync())        {            await Console.Out.WriteLineAsync($"Existing Blob : {item.Name}");        }    }    private static async Task<BlobContainerClient> GetContainerAsnyc(BlobServiceClient blobClient, string containerName)    {        BlobContainerClient containerClient = blobClient.GetBlobContainerClient(containerName);        await containerClient.CreateIfNotExistsAsync(PublicAccessType.Blob);        await Console.Out.WriteLineAsync($"Container Name : \t {containerClient.Name}");        return containerClient;    }    private static async Task<BlobClient> GetBlobAsync(BlobContainerClient client, string blobName)    {        BlobClient blob = client.GetBlobClient(blobName);        await Console.Out.WriteLineAsync($"Blob Found : \t {blob.Name}");        return blob;    }}
